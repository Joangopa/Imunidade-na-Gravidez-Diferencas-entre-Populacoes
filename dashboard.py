import streamlit as st
import pandas as pd
from PIL import Image
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib.patches import Patch
from joblib import load


# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Imunidade na Gravidez",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- CRIAR ABAS ---
aba1, aba2, aba3, aba4, aba5, aba6 = st.tabs([
    "üìå", 
    "üß¨ Introdu√ß√£o", 
    "üìä Conjunto de dados", 
    "üìà An√°lises", 
    "ü§ñ Estimando Neutr√≥filos",
    "üìå Considera√ß√µes Finais"
])


# --- Aba 1: Introdu√ß√£o com imagem do t√≠tulo ---
with aba1:

    st.markdown("<h1 style='text-align: center;'>Imunidade na Gravidez: Diferen√ßas entre Popula√ß√µes Tsimane e Estadounidense</h1>", 
            unsafe_allow_html=True)

    col1, col2, col3 = st.columns([1, 2, 1])  # Centralizar a imagem
    with col2:
        st.image("assets/imagem_titulo.png", 
                 caption="Ilustra√ß√£o do problema",
                 width=400)

# --- Aba 2: Texto e imagem com tipos celulares ---
with aba2:
    st.header("Introdu√ß√£o ao Problema")

    col1, col2 = st.columns([3, 2])

    with col1:
        st.write("""
            Este estudo analisa como diferentes ambientes moldam a imunidade materna durante a gravidez, 
            comparando popula√ß√µes expostas a n√≠veis contrastantes de microrganismos.
        """)

        st.write("""
            üë©üèΩ‚Äçü¶± Mulheres Tsimane, de uma comunidade ind√≠gena na floresta boliviana, com alta exposi√ß√£o a pat√≥genos naturais e fertilidade tradicional.

            üë©üèº Mulheres nos EUA, vivendo em ambiente urbano com baixa exposi√ß√£o microbiana.

            O foco est√° na an√°lise de seis tipos de c√©lulas imunol√≥gicas:
        """)

        col_esq, col_dir = st.columns(2)
        with col_esq:
            st.markdown("- **Leuc√≥citos totais**")
            st.markdown("- **Linf√≥citos**")
            st.markdown("- **Neutr√≥filos**")

        with col_dir:
            st.markdown("- **Mon√≥citos**")
            st.markdown("- **Eosin√≥filos**")
            st.markdown("- **Bas√≥filos**")

    with col2:
        st.image("assets/imagem_tipo_celulas.png", 
                 caption="Tipos de C√©lulas Imunol√≥gicas e fun√ß√£o",
                 use_container_width=True)


# --- Aba 3 ---
with aba3:
    st.header("üìä Dados e Vari√°veis")

    st.write("""
    O conjunto de dados considera dois tipos de popula√ß√µes. A primeira delas corresponde a dados de mulheres Tsimane.  
    A segunda fonte de dados corresponde a dados de mulheres morando nos Estados Unidos.  
    A idade das mulheres das duas fontes de dados varia entre 18 e 45 anos.
    """)
    
    st.write("Consideramos 6 grupos de vari√°veis no conjunto de dados distribu√≠dos da seguinte forma:")

    col1, col2 = st.columns([3, 2])

    with col1:
        st.subheader("Descri√ß√£o das Vari√°veis")

        st.markdown("**Contagem Leucocit√°ria (c√©lulas/¬µL)**")
        st.markdown("- WBC: Leuc√≥citos totais")
        st.markdown("- NEU: Neutr√≥filos")
        st.markdown("- LYM: Linf√≥citos")
        st.markdown("- MON: Mon√≥citos")
        st.markdown("- EOS: Eosin√≥filos")
        st.markdown("- BAS: Bas√≥filos")

        st.markdown("**Dados Antropom√©tricos**")
        st.markdown("- BMI: √çndice de massa corporal (kg/m¬≤)")
        st.markdown("- Age: Idade em anos")

        st.markdown("**Dados Reprodutivos**")
        st.markdown("- NumPartos: N√∫mero de partos")
        st.markdown("- RepStatus: Status reprodutivo (Cycling: N√£o gr√°vida. T1, T2, T3: Trimestre da gravidez)")

        st.markdown("**Metadados**")
        st.markdown("- Population: Origem populacional (THLHP: Tsimane, NHANES: Mulheres EUA)")

    with col2:
        st.subheader("Distribui√ß√£o dos Dados")

        try:
            image = Image.open("assets/imagem_relacao_gravidas_dados_finais.png")
            st.image(image, 
                     caption="Distribui√ß√£o por estado reprodutivo e origem populacional",
                     use_container_width=True)
        except FileNotFoundError:
            st.warning("Imagem n√£o encontrada no caminho especificado")
        except Exception as e:
            st.error(f"Erro ao carregar a imagem: {e}")

# --- Aba 4: An√°lises ---
with aba4:
    st.header("üìà An√°lise de Dados de Imunidade")

    @st.cache_data
    def load_data():
        data = pd.read_csv('assets/Hove_et_al_2020.csv')
        cond = (
            (data.WBC < 22000) &
            (data.NEU < 15000) &
            (data.LYM < 8000) &
            (data.MON < 1250) &
            (data.BAS < 400) &
            (data.EOS < 5000)
        )
        return data.loc[cond]

    dados = load_data()

    col1, col2 = st.columns(2)

    # --- HISTOGRAMAS ---
    with col1:
        st.subheader("Distribui√ß√£o das Contagens Celulares na Popula√ß√£o Geral")
        variaveis = ['WBC', 'NEU', 'LYM', 'MON', 'BAS', 'EOS']
        fig1, axes = plt.subplots(2, 3, figsize=(12, 8))
        sns.set(style="whitegrid")
        sns.set_context("notebook", font_scale=1.2)

        for ax, var in zip(axes.flat, variaveis):
            sns.histplot(data=dados, x=var, kde=True, bins=30, color='skyblue', ax=ax)
            ax.set_title(f'Distribui√ß√£o de {var}', fontsize=14)
            ax.set_xlabel(f'{var} (cells/ŒºL)', fontsize=12)
            ax.set_ylabel('Frequ√™ncia', fontsize=12)

        plt.tight_layout()
        st.pyplot(fig1)

    # --- GR√ÅFICO VIOLINO ---
    with col2:
        st.subheader("Compara√ß√£o por Status Reprodutivo e Popula√ß√£o")
        cell_types = ['WBC', 'NEU', 'LYM', 'MON', 'BAS', 'EOS']
        dados_long = dados.melt(
            id_vars=['RepStatus', 'Population'],
            value_vars=cell_types,
            var_name='Cell_Type',
            value_name='Cell_Count'
        )

        repstatus_order = ['Cycling', 'T1', 'T2', 'T3']
        population_order = ['NHANES', 'THLHP']

        dados_long['RepStatus'] = pd.Categorical(dados_long['RepStatus'], categories=repstatus_order, ordered=True)
        dados_long['Population'] = pd.Categorical(dados_long['Population'], categories=population_order, ordered=True)
        dados_long['Cell_Type'] = pd.Categorical(dados_long['Cell_Type'], categories=cell_types, ordered=True)

        fig2, axes = plt.subplots(2, 3, figsize=(15, 10))
        axes = axes.flatten()

        for i, cell_type in enumerate(cell_types):
            ax = axes[i]
            subset = dados_long[dados_long['Cell_Type'] == cell_type]

            sns.violinplot(
                data=subset,
                x='RepStatus',
                y='Cell_Count',
                hue='Population',
                split=True,
                inner=None,
                palette='Set1',
                order=repstatus_order,
                hue_order=population_order,
                ax=ax
            )

            # Adiciona m√©dia
            for j, status in enumerate(repstatus_order):
                for k, pop in enumerate(population_order):
                    pop_data = subset[(subset['RepStatus'] == status) & (subset['Population'] == pop)]
                    mean_val = pop_data['Cell_Count'].mean()
                    offset = -0.05 if pop == 'NHANES' else 0.05
                    ax.scatter(j + offset, mean_val, color='black', s=50, marker='o', zorder=10,
                               edgecolor='white', linewidth=0.8)

            ax.set_title(cell_type, fontsize=14)
            ax.set_xlabel("Status Reprodutivo", fontsize=12)
            ax.set_ylabel("cells/ŒºL", fontsize=12)

            if i == 0:
                handles, labels = ax.get_legend_handles_labels()
                ax.legend(handles, labels, title='Popula√ß√£o', fontsize=10, title_fontsize=11)
            else:
                ax.get_legend().remove()

        plt.tight_layout()
        st.pyplot(fig2)

    # --- IMAGENS FINAIS ---
    col3, col4 = st.columns(2)

    with col3:
        st.subheader("Resultados do teste U: Grupos com Menores Contagens")
        st.image("assets/imagem_tabela_menor_contagem.png", 
                 caption="Popula√ß√£o com menor contagem m√©dia para cada tipo celular",
                 width=500)

    with col4:
        st.subheader("K-means e PCA: Separa√ß√£o Populacional")
        st.image("assets/agrupamentos_pca.png", 
                 caption="Agrupamentos K-means com proje√ß√£o PCA",
                 width=500)
        
# --- Aba 5: modelo ML ---
with aba5:
    st.header("ü§ñ Modelo de Aprendizado de M√°quina")

    modelo = load("model/modelo_gradient_boosting.pkl")
    scaler = load("model/scaler.pkl")

    col1, col2 = st.columns(2)
    with col1:
        st.write("""
        A escolha de um modelo de regress√£o para estimar os n√≠veis de neutr√≥filos (NEU) resulta ser estrat√©gica por utilizar vari√°veis acess√≠veis e de baixo custo: 
        contagem de leuc√≥citos (WBC), IMC, idade, hist√≥rico reprodutivo e grupo populacional.
        """)
        st.write("""
        O modelo escolhido a partir de metricas como MAE e R¬≤-ajustado, √© o GradientBoosting Regressor.
        """)

        st.write("""
        | M√©trica       | Valor       |
        |---------------|-------------|
        | MAE           | 616.030     |
        | R¬≤            | 0.802       |
        | R¬≤-ajustado   | 0.799       |
        """)

    with col2:
        st.image("assets/matiz_correlacao_ml.png", caption="Matriz de Correla√ß√£o para as Vari√°veis Preditoras do Modelo de Regress√£o", use_container_width=True)

    st.markdown("---")
    st.subheader("Desempenho do Modelo GradientBoosting Regressor")

    col3, col4 = st.columns(2)
    with col3:
        st.image("assets/impato_variaveis_modelo.png", caption="Import√¢ncia das Vari√°veis no Modelo", use_container_width=True)
    with col4:
        st.image("assets/real_vs_predict_regressao.png", caption="Valores Reais vs. Preditos pelo Modelo", use_container_width=True)

    #st.image("assets/impato_variaveis_modelo.png", caption="Import√¢ncia das Vari√°veis no Modelo", width=700)

    st.markdown("---")
    st.subheader("Simulador de Predi√ß√£o")
    st.write("Preencha os dados para gerar a predi√ß√£o:")

    with st.form("prediction_form"):
        col1, col2 = st.columns(2)
        with col1:
            wbc = st.number_input("Contagem total de leuc√≥citos (WBC)", 0, 22000, 7000)
            population = st.selectbox("Popula√ß√£o", ["Tsimane", "Americano"])
            rep_status = st.selectbox("Trimestre da gravidez", [
                "0 - N√£o gr√°vida", "1 - Primeiro trimestre", "2 - Segundo trimestre", "3 - Terceiro trimestre"])
        with col2:
            bmi = st.number_input("√çndice de massa corporal (BMI)", 10.0, 50.0, 24.0, step=0.1)
            age = st.number_input("Idade", 15, 80, 30)
            num_partos = st.number_input("N√∫mero de partos", 0, 20, 1)
        submitted = st.form_submit_button("Gerar Predi√ß√£o")

    if submitted:
        input_data = pd.DataFrame({
            'WBC': [wbc],
            'BMI': [bmi],
            'Age': [age],
            'NumPartos': [num_partos],
            'Population_bin': [1 if population == "Americano" else 0],
            'RepStatus_cat': [int(rep_status[0])],
            'RepStatus_bin': [0 if rep_status.startswith("0") else 1]
        })
        try:
            scaled_input = scaler.transform(input_data)
            prediction = modelo.predict(scaled_input)[0]
            st.subheader("Resultado da Predi√ß√£o")
            st.metric("Contagem estimada de neutr√≥filos (c√©lulas/ŒºL)", f"{prediction:.2f}")
            st.info("""
            **Interpreta√ß√£o:**  
            Este valor representa a contagem estimada de neutr√≥filos (c√©lulas/ŒºL) no sangue com base nos par√¢metros fornecidos.
            """)
        except Exception as e:
            st.error(f"Erro ao realizar a predi√ß√£o: {str(e)}")

# --- Aba 6: Considera√ß√µes Finais ---

with aba6:

    st.header("üìå Considera√ß√µes Finais")

    st.markdown("""
    **A partir do conjunto de dados utilizado neste trabalho, pode-se concluir que:**
    """)

    # Lista de conclus√µes com marcadores
    conclusions = [
        "As duas popula√ß√µes estudadas apresentam perfis distintos de contagem leucocit√°ria, "
        "refletindo provavelmente diferen√ßas em seus ambientes e condi√ß√µes de vida.",
        
        "O estado reprodutivo (especialmente a gravidez) demonstra influ√™ncia significativa "
        "nos par√¢metros imunol√≥gicos analisados.",
        
        "A abordagem de machine learning mostrou-se eficaz para modelar as complexas intera√ß√µes "
        "entre vari√°veis biol√≥gicas, antropom√©tricas e populacionais.",
        
        "A inclus√£o de metadados mais detalhados sobre a popula√ß√£o americana poderia enriquecer "
        "as an√°lises comparativas."
    ]

    for conclusion in conclusions:
        st.markdown(f"- {conclusion}")

    st.markdown("---")

    st.subheader("Recomenda√ß√µes para Pesquisas Futuras")
    st.markdown("""
    Sugere-se para trabalhos futuros:
    
    1. **Amplia√ß√£o da amostra**: Incluir outras popula√ß√µes para an√°lise comparativa  
    2. **Dados adicionais**: Coletar informa√ß√µes sobre dieta, atividade f√≠sica e exposi√ß√£o ambiental  
    3. **Modelagem avan√ßada**: Explorar t√©cnicas de deep learning para padr√µes mais complexos  
    4. **Estudo longitudinal**: Acompanhar as varia√ß√µes nos par√¢metros ao longo do tempo  
    """)